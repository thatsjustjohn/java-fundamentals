/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import org.junit.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.*;

public class LibraryTest {
    @Test
    public void testSomeLibraryMethod() {
        Library classUnderTest = new Library();
        assertTrue("someLibraryMethod should return 'true'", classUnderTest.someLibraryMethod());
    }

    // ROLL
    @Test
    public void test_roll_five() {
        Library classUnderTest = new Library();
        assertTrue("test_roll_five should return 'true'", classUnderTest.roll(5).length == 5);
    }
    @Test
    public void test_roll_numbers(){
        Library classUnderTest = new Library();
        int[] testArray = classUnderTest.roll(5);
        for(int i = 0; i < 5; i++){
            assertTrue("test_roll_numbers should return 'true'", 1 <= testArray[i] && testArray[i] <= 6);
        }
    }

    // DUPLICATE
    @Test
    public void test_true_duplicate_numbers(){
        Library classUnderTest = new Library();
        assertTrue("test_duplicate_numnbers should return 'true'", classUnderTest.containsDuplicates(new int[] {1,2,3,4,5,6,2}));
    }
    @Test
    public void test_false_duplicate_numbers(){
        Library classUnderTest = new Library();
        assertFalse("test_duplicate_numnbers should return 'false'", classUnderTest.containsDuplicates(new int[] {1,2,3,4,5,6}));
    }
    @Test
    public void test_false_empty_duplicate_numbers(){
        Library classUnderTest = new Library();
        assertFalse("test_duplicate_numbers should return 'true'", classUnderTest.containsDuplicates(new int[] {}));
    }

    // AVERAGE
    @Test
    public void test_true_arrayAverage(){
        Library classUnderTest = new Library();
        assertTrue("test_true_arrayAverage should return '3.0'", classUnderTest.arrayAverage(new int[] {1,2,3,4,5}) == 3.0);
    }

    @Test
    public void test_false_arrayAverage(){
        Library classUnderTest = new Library();
        assertFalse("test_false_arrayAverage should return '3.0' is suppose to fail", classUnderTest.arrayAverage(new int[] {1,2,3,4,5}) == 2.0);
    }

    @Test
    public void test_empty_arrayAverage(){
        Library classUnderTest = new Library();
        assertTrue("test_empty_arrayAverage should return '0.0'", classUnderTest.arrayAverage(new int[]{}) == 0.0);
    }

    // 2D ARRAY AVERAGE MINIMUM
    @Test
    public void test_equals_twoDArrayAverage(){
        int[][] weeklyMonthTemperatures = {
                {66, 64, 58, 65, 71, 57, 60},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61},
                {65, 56, 55, 52, 55, 62, 57}
        };
        Library classUnderTest = new Library();
        assertArrayEquals(classUnderTest.twoDArrayAverage(weeklyMonthTemperatures), new int[] {55, 54, 60, 53, 59, 57, 61});
    }

    @Test
    public void test_empty_twoDArrayAverage(){
        Library classUnderTest = new Library();
        assertTrue("test_empty_twoDArrayAverage should return 'null'",classUnderTest.twoDArrayAverage(new int[][]{}) == null);
    }

    // ANALYZE WEATHER
    @Test
    public void test_equals_AnalyzeWeatherData(){
        int[][] weeklyMonthTemperatures = {
                {66, 64, 58, 65, 71, 57, 60},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61},
                {65, 56, 55, 52, 55, 62, 57}
        };
        String compareResult = "High: 72\n" +
                "Low: 51\n" +
                "Never saw temperature: 63\n" +
                "Never saw temperature: 67\n" +
                "Never saw temperature: 68\n" +
                "Never saw temperature: 69";
        Library classUnderTest = new Library();
        assertEquals(classUnderTest.analyzeWeatherData(weeklyMonthTemperatures), compareResult);
    }

    // Tally
    @Test
    public void test_equals_Tally(){
        List<String> votes = new ArrayList<>();
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Shrub");
        votes.add("Hedge");
        votes.add("Shrub");
        votes.add("Bush");
        votes.add("Hedge");
        votes.add("Bush");
        Library classUnderTest = new Library();
        String winner = classUnderTest.tally(votes);
        System.out.println(winner + " received the most votes!");
    }
}
